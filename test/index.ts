import tap from 'tap'
import wcm from '../src'

tap.test('No wildcards', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('')(''))
    t.ok(wcm('/')('/'))
    t.ok(wcm('one')('one'))
    t.ok(wcm('one/two')('one/two'))
    t.notOk(wcm('')('/'))
    t.notOk(wcm('a/b')('a.b'))
    t.notOk(wcm('one')('two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('one', '/')('one'))
    t.ok(wcm('two', '/')('two'))
    t.ok(wcm('one/two', '/')('one/two'))
    t.ok(wcm('one/two/three', '/')('one/two/three'))
    t.ok(wcm('one.two', '/')('one.two'))
    t.ok(wcm('', '/')(''))
    t.ok(wcm('one//', '/')('one//'))
    t.ok(wcm('/', '/')('/'))
    t.ok(wcm(' ', '/')(' '))
    t.ok(wcm('/one/', '/')('/one/'))
    t.notOk(wcm('one', '/')('two'))
    t.notOk(wcm('two', '/')('one'))
    t.notOk(wcm('one/two', '/')('one/three'))
    t.notOk(wcm('one/two/three', '/')('one/two/four'))
    t.notOk(wcm('one', '/')('one.two'))
    t.notOk(wcm('one.two', '/')('one'))
    t.notOk(wcm('', '/')('one'))
    t.notOk(wcm('one', '/')('one '))
    t.notOk(wcm(' one', '/')('one'))
    t.notOk(wcm('one.two', '/')('one.two.three'))
    t.notOk(wcm('', '/')('**'))
    t.notOk(wcm('', '/')('*'))
    t.notOk(wcm('/', '/')(''))
    t.notOk(wcm('/', '/')('one/'))
    t.notOk(wcm('/', '/')('/one'))
    t.notOk(wcm('', '/')(' '))
    t.notOk(wcm('/', '/')(' '))
    t.notOk(wcm('/', '/')(' /'))
    t.notOk(wcm('/', '/')('/ '))
    t.notOk(wcm('/', '/')(' / '))
    t.notOk(wcm('one/two', '/')('one/*'))
    t.notOk(wcm('one/two', '/')('one/**'))
    t.notOk(wcm('one/two/three', '/')('one/*/three'))
    t.end()
  })

  t.end()
})

tap.test('?', (t) => {
  t.test('No separator given - matches 1 arbitrary char', (t) => {
    t.ok(wcm('?')('o'))
    t.ok(wcm('?')('/'))
    t.ok(wcm('on?')('one'))
    t.ok(wcm('???')('one'))
    t.ok(wcm('???')('two'))
    t.ok(wcm('one?two')('one/two'))
    t.notOk(wcm('?')(''))
    t.notOk(wcm('?')('on'))
    t.notOk(wcm('??e')('on'))
    t.notOk(wcm('one?')('one'))
    t.end()
  })

  t.test('Separator given - matches 1 non-separator char', (t) => {
    t.ok(wcm('?', '/')('a'))
    t.ok(wcm('?', '/')(' '))
    t.ok(wcm('??', '/')('ab'))
    t.ok(wcm('??', '/')(' b'))
    t.ok(wcm('???', '/')('one'))
    t.ok(wcm('o?e', '/')('one'))
    t.ok(wcm('?ne', '/')('one'))
    t.ok(wcm('?ne', '/')('ane'))
    t.ok(wcm('on?', '/')('one'))
    t.ok(wcm('on?', '/')('ont'))
    t.ok(wcm('o??', '/')('one'))
    t.ok(wcm('o??', '/')('ota'))
    t.ok(wcm('?n?', '/')('one'))
    t.ok(wcm('one/t?o', '/')('one/two'))
    t.ok(wcm('one/tw?', '/')('one/two'))
    t.ok(wcm('o?e/tw?', '/')('one/two'))
    t.notOk(wcm('?', '/')(''))
    t.notOk(wcm('?', '/')('/'))
    t.notOk(wcm('?', '/')('/o'))
    t.notOk(wcm('?', '/')('on'))
    t.notOk(wcm('?', '/')('o/n'))
    t.notOk(wcm('??', '/')(''))
    t.notOk(wcm('??', '/')('/'))
    t.notOk(wcm('??', '/')('//'))
    t.notOk(wcm('??', '/')('o'))
    t.notOk(wcm('??', '/')('on/e'))
    t.notOk(wcm('??', '/')('one'))
    t.notOk(wcm('???', '/')('on'))
    t.notOk(wcm('???', '/')('/on'))
    t.notOk(wcm('???', '/')('one/two'))
    t.notOk(wcm('???', '/')('/'))
    t.notOk(wcm('???', '/')('///'))
    t.notOk(wcm('o?e', '/')('oe'))
    t.notOk(wcm('?ne', '/')('ne'))
    t.notOk(wcm('on?', '/')('on'))
    t.notOk(wcm('on?', '/')('on/'))
    t.notOk(wcm('?one', '/')('one'))
    t.notOk(wcm('?one', '/')('/one'))
    t.notOk(wcm('o??', '/')('o//'))
    t.notOk(wcm('o??', '/')('o/e'))
    t.notOk(wcm('o??', '/')('o'))
    t.notOk(wcm('o??', '/')('on/e'))
    t.notOk(wcm('o???', '/')('on/e'))
    t.notOk(wcm('one?two', '/')('one/two'))
    t.notOk(wcm('one/t?o', '/')('one/to'))
    t.notOk(wcm('one/tw?', '/')('one/tw/'))
    t.notOk(wcm('o?e/tw?', '/')('onetwo'))
    t.end()
  })

  t.end()
})

tap.test('*', (t) => {
  t.test('No separator given - matches 0 or more arbitrary chars', (t) => {
    t.ok(wcm('*')(''))
    t.ok(wcm('*')('/'))
    t.ok(wcm('*')('one'))
    t.ok(wcm('one*')('one'))
    t.ok(wcm('one*')('one/two'))
    t.notOk(wcm('one*')('on'))
    t.notOk(wcm('one*')('ont'))
    t.notOk(wcm('one*')('onte'))
    t.end()
  })

  t.test('Separator given - matches 0 or more non-separator chars', (t) => {
    t.ok(wcm('*', '/')(''))
    t.ok(wcm('*', '/')('one'))
    t.ok(wcm('*/*', '/')('one/two'))
    t.ok(wcm('*/*', '/')('one/'))
    t.ok(wcm('*/*', '/')('one/ '))
    t.ok(wcm('*/*/*', '/')('one/two/three'))
    t.ok(wcm('*/*/*', '/')('//'))
    t.ok(wcm('one/*', '/')('one/two'))
    t.ok(wcm('one/*', '/')('one/*'))
    t.ok(wcm('one/*', '/')('one/**'))
    t.ok(wcm('one/*', '/')('one/***'))
    t.ok(wcm('one/*', '/')('one/'))
    t.ok(wcm('one/*', '/')('one/ '))
    t.ok(wcm('one/*/three', '/')('one/two/three'))
    t.ok(wcm('one/*/three/', '/')('one/two/three/'))
    t.ok(wcm('one/*/three/*', '/')('one/two/three/'))
    t.ok(wcm('one/*/three/*', '/')('one/two/three/four'))
    t.ok(wcm('one*', '/')('one'))
    t.ok(wcm('*two', '/')('two'))
    t.ok(wcm('one*', '/')('onetwo'))
    t.ok(wcm('*two', '/')('onetwo'))
    t.ok(wcm('one*three', '/')('onetwothree'))
    t.ok(wcm('one*three', '/')('onethree'))
    t.ok(wcm('one/*three', '/')('one/twothree'))
    t.ok(wcm('one/two*', '/')('one/twothree'))
    t.ok(wcm('*/', '/')('/'))
    t.ok(wcm('*/one', '/')('/one'))
    t.ok(wcm('*n*', '/')('one'))
    t.ok(wcm('*n*', '/')('oonee'))
    t.ok(wcm('*n*', '/')('n'))
    t.ok(wcm('o*n*e', '/')('one'))
    t.ok(wcm('o*n*e', '/')('oone'))
    t.ok(wcm('o*n*e', '/')('onne'))
    t.ok(wcm('o*n*e', '/')('oonne'))
    t.ok(wcm('*ne/*o', '/')('ne/o'))
    t.ok(wcm('*ne/*o', '/')('one/o'))
    t.ok(wcm('*ne/*o', '/')('ne/two'))
    t.ok(wcm('*ne/*o', '/')('one/two'))
    t.ok(wcm('*/*o', '/')('/o'))
    t.ok(wcm('*/*o', '/')('/two'))
    t.ok(wcm('*/*o', '/')('one/two'))
    t.notOk(wcm('*', '/')('/'))
    t.notOk(wcm('*', '/')('//'))
    t.notOk(wcm('*', '/')('one/two'))
    t.notOk(wcm('*', '/')('one/'))
    t.notOk(wcm('*', '/')('/one'))
    t.notOk(wcm('one/*', '/')(''))
    t.notOk(wcm('one/*', '/')('/'))
    t.notOk(wcm('one/*', '/')('//'))
    t.notOk(wcm('one/*', '/')('one/two/three'))
    t.notOk(wcm('one/*', '/')('one'))
    t.notOk(wcm('one/*', '/')('/one'))
    t.notOk(wcm('one/*', '/')('two/three'))
    t.notOk(wcm('*/one', '/')(''))
    t.notOk(wcm('*/one', '/')('/'))
    t.notOk(wcm('*/one', '/')('//'))
    t.notOk(wcm('*/one', '/')('one/two/three'))
    t.notOk(wcm('*/one', '/')('one'))
    t.notOk(wcm('*/one', '/')('one/'))
    t.notOk(wcm('*/one', '/')('one/two'))
    t.notOk(wcm('*two', '/')('one/two'))
    t.notOk(wcm('*n*', '/')(''))
    t.notOk(wcm('*n*', '/')('/'))
    t.notOk(wcm('*n*', '/')('n/'))
    t.notOk(wcm('*n*', '/')('one/'))
    t.notOk(wcm('*n*', '/')('/n'))
    t.notOk(wcm('*n*', '/')('/n/'))
    t.notOk(wcm('o*n*e', '/')('/one'))
    t.notOk(wcm('o*n*e', '/')('one/'))
    t.notOk(wcm('o*n*e', '/')('o/ne'))
    t.notOk(wcm('o*n*e', '/')('on/e'))
    t.notOk(wcm('o*n*e', '/')('o/n/e'))
    t.notOk(wcm('o*n*e', '/')(' one '))
    t.notOk(wcm('*ne/*o', '/')('/ne/o'))
    t.notOk(wcm('*/*o', '/')('//o'))
    t.notOk(wcm('*/*o', '/')('/o/'))
    t.end()
  })

  t.end()
})

tap.test('**', (t) => {
  t.test('No separator given - acts as *', (t) => {
    t.ok(wcm('**')(''))
    t.ok(wcm('**')('/'))
    t.ok(wcm('**')('one'))
    t.ok(wcm('one**')('one'))
    t.ok(wcm('one**')('one/two'))
    t.notOk(wcm('one**')('on'))
    t.notOk(wcm('one**')('ont'))
    t.notOk(wcm('one**')('onte'))
    t.end()
  })

  t.test('Separator given - matches any number of segments', (t) => {
    t.ok(wcm('**', '/')(''))
    t.ok(wcm('**', '/')(' '))
    t.ok(wcm('**', '/')(' /'))
    t.ok(wcm('**', '/')('/'))
    t.ok(wcm('**', '/')('///'))
    t.ok(wcm('**', '/')('two'))
    t.ok(wcm('**', '/')('two/three'))
    t.ok(wcm('**', '/')('   /three'))
    t.ok(wcm('**', '/')('   /three///'))
    t.ok(wcm('**', '/')('/three'))
    t.ok(wcm('**', '/')('//three'))
    t.ok(wcm('one/**', '/')('one'))
    t.ok(wcm('one/**', '/')('one/two'))
    t.ok(wcm('one/**', '/')('one/two/three'))
    t.ok(wcm('one/**', '/')('one/'))
    t.ok(wcm('one/**', '/')('one/ / '))
    t.ok(wcm('one/**', '/')('one/*/ **'))
    t.ok(wcm('one/**', '/')('one/***'))
    t.ok(wcm('**/', '/')('/one/'))
    t.ok(wcm('**/one', '/')('/one'))
    t.ok(wcm('one/**/two', '/')('one/two'))
    t.ok(wcm('one/**/three', '/')('one/two/three'))
    t.ok(wcm('one/**/four', '/')('one/two/three/four'))
    t.ok(wcm('o**', '/')('o'))
    t.ok(wcm('o**', '/')('one'))
    t.ok(wcm('o**', '/')('onetwo'))
    t.ok(wcm('**e', '/')('one'))
    t.ok(wcm('**e', '/')('twoone'))
    t.notOk(wcm('one/**', '/')(''))
    t.notOk(wcm('one/**', '/')('/'))
    t.notOk(wcm('one/**', '/')('//'))
    t.notOk(wcm('one/**', '/')('two'))
    t.notOk(wcm('one/**', '/')('/one'))
    t.notOk(wcm('**/one', '/')(''))
    t.notOk(wcm('**/one', '/')('/'))
    t.notOk(wcm('**/one', '/')('//'))
    t.notOk(wcm('**/one', '/')('two'))
    t.notOk(wcm('**/one', '/')('one/'))
    t.notOk(wcm('**two', '/')('one/two'))
    t.notOk(wcm('**two', '/')('one/two'))
    t.notOk(wcm('**/', '/')('/one'))
    t.notOk(wcm('**/', '/')('/one/two'))
    t.notOk(wcm('o**', '/')(''))
    t.notOk(wcm('o**', '/')('two'))
    t.notOk(wcm('o**', '/')('o/two'))
    t.notOk(wcm('o**', '/')('o/two/three'))
    t.notOk(wcm('**e', '/')(''))
    t.notOk(wcm('**e', '/')('two'))
    t.notOk(wcm('**e', '/')('two/one'))
    t.notOk(wcm('**e', '/')('three/two/one'))
    t.end()
  })

  t.end()
})

tap.test('? and *', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('?*')('o'))
    t.ok(wcm('?*')('one'))
    t.ok(wcm('?*')('one/two'))
    t.ok(wcm('?ne*')('one/two'))
    t.notOk(wcm('?*')(''))
    t.notOk(wcm('one?*')('one'))
    t.notOk(wcm('?ne*')('ne/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('?*', '/')('one'))
    t.ok(wcm('?*/', '/')('one/'))
    t.ok(wcm('?*/*', '/')('one/'))
    t.ok(wcm('?*/*', '/')('one/two'))
    t.ok(wcm('?*?', '/')('oe'))
    t.ok(wcm('?*?', '/')('one'))
    t.ok(wcm('?*?', '/')('onnne'))
    t.ok(wcm('?*?/*', '/')('one/'))
    t.ok(wcm('?*?/*', '/')('one/two'))
    t.ok(wcm('?*?/*/*', '/')('one/two/three'))
    t.ok(wcm('?*?/*/*', '/')('one//'))
    t.notOk(wcm('?*', '/')(''))
    t.notOk(wcm('?*', '/')('/'))
    t.notOk(wcm('?*', '/')('one/'))
    t.notOk(wcm('?*', '/')('/one'))
    t.notOk(wcm('?*/*', '/')('one'))
    t.notOk(wcm('?*/*', '/')('one/two/'))
    t.notOk(wcm('?*/*', '/')('one/two/three'))
    t.notOk(wcm('?*?', '/')('o'))
    t.notOk(wcm('?*?', '/')('/one'))
    t.notOk(wcm('?*?', '/')('o/e'))
    t.notOk(wcm('?*?/*', '/')(''))
    t.notOk(wcm('?*?/*', '/')('one'))
    t.notOk(wcm('?*?/*', '/')('one/two/three'))
    t.notOk(wcm('?*?/*/*', '/')(''))
    t.notOk(wcm('?*?/*/*', '/')('one'))
    t.notOk(wcm('?*?/*/*', '/')('one/two'))
    t.notOk(wcm('?*?/*/*', '/')('one/two/three/four'))
    t.notOk(wcm('?*?/*/*', '/')('o/two/three'))
    t.end()
  })

  t.end()
})

tap.test('* and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('*/**')('/'))
    t.ok(wcm('*/**')('one/two'))
    t.ok(wcm('**/*')('one/two'))
    t.ok(wcm('one**/*')('one/two'))
    t.ok(wcm('one*/**')('one/two'))
    t.ok(wcm('**one*/**')('one/two'))
    t.notOk(wcm('**/*')(''))
    t.notOk(wcm('**/*')('one'))
    t.notOk(wcm('one**/*')('one'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('*/**', '/')(''))
    t.ok(wcm('*/**', '/')(' '))
    t.ok(wcm('*/**', '/')(' /'))
    t.ok(wcm('*/**', '/')('/'))
    t.ok(wcm('*/**', '/')('///'))
    t.ok(wcm('*/**', '/')('two'))
    t.ok(wcm('*/**', '/')('two/three'))
    t.ok(wcm('*/**', '/')('   /three'))
    t.ok(wcm('*/**', '/')('   /three///'))
    t.ok(wcm('*/**', '/')('/three'))
    t.ok(wcm('*/**', '/')('//three'))
    t.ok(wcm('**/*', '/')('one'))
    t.ok(wcm('**/*', '/')('one/two'))
    t.ok(wcm('**/*', '/')('one/two/three'))
    t.ok(wcm('**/*', '/')('one/*/three'))
    t.ok(wcm('**/*', '/')('one/*/**'))
    t.ok(wcm('*/**/*', '/')('one/two'))
    t.ok(wcm('*/**/*', '/')('one/two/three'))
    t.ok(wcm('*/**/*', '/')('one/two/three/four/five'))
    t.ok(wcm('*/**/*', '/')('one/two/*/four/five'))
    t.ok(wcm('*/**/*', '/')('one/two/*/four/**'))
    t.ok(wcm('*/**/*', '/')('one/ /three'))
    t.ok(wcm('*/**/*/**', '/')('one/two'))
    t.ok(wcm('*/**/*/**', '/')('one/two/three'))
    t.ok(wcm('one/*/**', '/')('one/two'))
    t.ok(wcm('one/*/**', '/')('one/two/three'))
    t.ok(wcm('one/*/**', '/')('one/two/three/four'))
    t.ok(wcm('one/*/**', '/')('one/ / '))
    t.ok(wcm('one/*/**', '/')('one/*/ **'))
    t.ok(wcm('one/*/**', '/')('one/***'))
    t.ok(wcm('one/**/two/*', '/')('one/two/three'))
    t.ok(wcm('one/**/two/*', '/')('one/two/three'))
    t.ok(wcm('one/**/three/*', '/')('one/two/three/four'))
    t.ok(wcm('*e/**e', '/')('one/one'))
    t.ok(wcm('*e/**e', '/')('e/e'))
    t.notOk(wcm('*/**/*', '/')('one'))
    t.notOk(wcm('*/**/*/**', '/')('one'))
    t.notOk(wcm('one/*/**', '/')(''))
    t.notOk(wcm('one/*/**', '/')('/'))
    t.notOk(wcm('one/*/**', '/')('//'))
    t.notOk(wcm('one/*/**', '/')('one'))
    t.notOk(wcm('*/**/one', '/')(''))
    t.notOk(wcm('*/**/one', '/')('/'))
    t.notOk(wcm('*/**/one', '/')('//'))
    t.notOk(wcm('*/**/one', '/')('one'))
    t.notOk(wcm('*/**/one', '/')('one/two'))
    t.notOk(wcm('*/**/one', '/')('two/one/two'))
    t.notOk(wcm('*e/**e', '/')('one/two'))
    t.notOk(wcm('*e/**e', '/')('two/e'))
    t.end()
  })

  t.end()
})

tap.test('? and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('?**')('o'))
    t.ok(wcm('?**')('one'))
    t.ok(wcm('?**')('one/two'))
    t.ok(wcm('?ne**')('one/two'))
    t.notOk(wcm('?**')(''))
    t.notOk(wcm('one?**')('one'))
    t.notOk(wcm('?ne**')('ne/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('**/?', '/')('o'))
    t.ok(wcm('**/?', '/')('one/t'))
    t.ok(wcm('**/?', '/')('one/two/three/f'))
    t.ok(wcm('???/**/???', '/')('one/two'))
    t.ok(wcm('???/**/???', '/')('one/three/two'))
    t.ok(wcm('???/**/???', '/')('one//two'))
    t.notOk(wcm('**/?', '/')(''))
    t.notOk(wcm('**/?', '/')('one'))
    t.notOk(wcm('???/**/???', '/')('one/two/three'))
    t.notOk(wcm('???/**/???', '/')('one'))
    t.notOk(wcm('???/**/???', '/')('onetwo'))
    t.end()
  })

  t.end()
})

tap.test('?, * and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('?*/**')('one/two'))
    t.ok(wcm('?*/?**')('one/two'))
    t.notOk(wcm('?*/**')('one'))
    t.notOk(wcm('?*/**')('/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('?*?/**', '/')('oe'))
    t.ok(wcm('?*?/**', '/')('one'))
    t.ok(wcm('?*?/**', '/')('one/'))
    t.ok(wcm('?*?/**', '/')('one/two'))
    t.ok(wcm('?*?/**', '/')('one/two/three'))
    t.ok(wcm('?*?/**', '/')('one/two/three/four'))
    t.ok(wcm('*/**/?*', '/')('/o'))
    t.ok(wcm('*/**/?*', '/')('/one'))
    t.ok(wcm('*/**/?*', '/')('one/two'))
    t.ok(wcm('*/**/?*', '/')('one/two/three'))
    t.ok(wcm('*/**/?*', '/')('/two/three'))
    t.ok(wcm('*/**/?*', '/')('one/two/three/four'))
    t.notOk(wcm('?*?/**', '/')(''))
    t.notOk(wcm('?*?/**', '/')('/'))
    t.notOk(wcm('?*?/**', '/')('o'))
    t.notOk(wcm('?*?/**', '/')('o/two'))
    t.notOk(wcm('*/**/?*', '/')(''))
    t.notOk(wcm('*/**/?*', '/')('o'))
    t.notOk(wcm('*/**/?*', '/')('o/'))
    t.end()
  })

  t.end()
})

tap.test('Different separators are supported', (t) => {
  t.ok(wcm('', undefined)(''))
  t.ok(wcm('one', undefined)('one'))
  t.ok(wcm('o?e', undefined)('one'))
  t.ok(wcm('', '.')(''))
  t.ok(wcm('one', '.')('one'))
  t.ok(wcm('o?e', '.')('one'))
  t.ok(wcm('one.two', '.')('one.two'))
  t.ok(wcm('one.*', '.')('one.*'))
  t.ok(wcm('one.**.*\\?js', '.')('one.two.three?js'))
  t.ok(wcm('one ** *\\?js', ' ')('one two three?js'))
  t.notOk(wcm('one.two', '.')('one/two'))
  t.notOk(wcm('one?two', '.')('one.two'))
  t.notOk(wcm('one.*', '.')('one/*'))
  t.notOk(wcm('one.**.*\\.js', '.')('one.two.three.js'))
  t.end()
})

tap.test('RegExp characters are treated literally', (t) => {
  t.ok(wcm('[].')('[].'))
  t.ok(wcm('one[].*+{}]  ][[..$', '/')('one[].*+{}]  ][[..$'))
  t.notOk(wcm('[].')('[]?'))
  t.notOk(wcm('one', '/')('one[].*+{}]][[..$'))
  t.notOk(wcm('one[].*+{}]][[..$', '/')('one'))
  t.notOk(wcm('[].*+{}]][[..$', '/')('].*+{'))
  t.end()
})

tap.test('Escaped wildcards are treated literally', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('\\?')('?'))
    t.ok(wcm('one/\\*\\*')('one/**'))
    t.ok(wcm('on\\?.two\\*\\*')('on?.two**'))
    t.notOk(wcm('\\?')('a'))
    t.notOk(wcm('one/\\*\\*')('one/two'))
    t.notOk(wcm('on\\?.two\\*\\*')('one.two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('\\?', '/')('?'))
    t.ok(wcm('\\*', '/')('*'))
    t.ok(wcm('\\*\\*', '/')('**'))
    t.ok(wcm('\\?\\*', '/')('?*'))
    t.ok(wcm('\\?\\*\\*', '/')('?**'))
    t.ok(wcm('one\\?', '/')('one?'))
    t.ok(wcm('one\\*', '/')('one*'))
    t.ok(wcm('one\\*\\*', '/')('one**'))
    t.ok(wcm('one/\\*\\*', '/')('one/**'))
    t.notOk(wcm('\\?', '/')('!'))
    t.notOk(wcm('\\*', '/')('!'))
    t.notOk(wcm('\\*', '/')('!!'))
    t.notOk(wcm('\\*\\*', '/')('!!'))
    t.notOk(wcm('\\*\\*', '/')('one/two'))
    t.notOk(wcm('\\?\\*', '/')('one'))
    t.notOk(wcm('\\?\\*\\*', '/')('one'))
    t.notOk(wcm('one\\?', '/')('one!'))
    t.notOk(wcm('one\\*', '/')('one!'))
    t.notOk(wcm('one\\*\\*', '/')('one!!'))
    t.notOk(wcm('one/\\*\\*', '/')('one/!!'))
    t.end()
  })
  t.end()
})

tap.test('Compiled function has `pattern` set to original value', (t) => {
  t.equal(wcm('').pattern, '')
  t.equal(wcm('foo').pattern, 'foo')
  t.equal(wcm('f?o/bar*', '/').pattern, 'f?o/bar*')
  t.end()
})

tap.test('Compiled function has `separator` set to original value', (t) => {
  t.equal(wcm('foo').separator, undefined)
  t.equal(wcm('foo', '/').separator, '/')
  t.equal(wcm('foo', '.').separator, '.')
  t.end()
})
