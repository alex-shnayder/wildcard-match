import tap from 'tap'
import wcm from '../src'

tap.test('Basic', (t) => {
  t.type(wcm('pattern'), RegExp)
  t.equal(wcm('pattern').pattern, 'pattern')
  t.equal(wcm('foo').separator, undefined)
  t.equal(wcm('foo', '/').separator, '/')
  t.equal(wcm('foo', '.').separator, '.')
  t.end()
})

tap.test('No wildcards', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('').test(''))
    t.ok(wcm('/').test('/'))
    t.ok(wcm('one').test('one'))
    t.ok(wcm('one/two').test('one/two'))
    t.notOk(wcm('').test('/'))
    t.notOk(wcm('a/b').test('a.b'))
    t.notOk(wcm('one').test('two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('one', '/').test('one'))
    t.ok(wcm('two', '/').test('two'))
    t.ok(wcm('one/two', '/').test('one/two'))
    t.ok(wcm('one/two/three', '/').test('one/two/three'))
    t.ok(wcm('one.two', '/').test('one.two'))
    t.ok(wcm('', '/').test(''))
    t.ok(wcm('one//', '/').test('one//'))
    t.ok(wcm('/', '/').test('/'))
    t.ok(wcm(' ', '/').test(' '))
    t.ok(wcm('/one/', '/').test('/one/'))
    t.notOk(wcm('one', '/').test('two'))
    t.notOk(wcm('two', '/').test('one'))
    t.notOk(wcm('one/two', '/').test('one/three'))
    t.notOk(wcm('one/two/three', '/').test('one/two/four'))
    t.notOk(wcm('one', '/').test('one.two'))
    t.notOk(wcm('one.two', '/').test('one'))
    t.notOk(wcm('', '/').test('one'))
    t.notOk(wcm('one', '/').test('one '))
    t.notOk(wcm(' one', '/').test('one'))
    t.notOk(wcm('one.two', '/').test('one.two.three'))
    t.notOk(wcm('', '/').test('**'))
    t.notOk(wcm('', '/').test('*'))
    t.notOk(wcm('/', '/').test(''))
    t.notOk(wcm('/', '/').test('one/'))
    t.notOk(wcm('/', '/').test('/one'))
    t.notOk(wcm('', '/').test(' '))
    t.notOk(wcm('/', '/').test(' '))
    t.notOk(wcm('/', '/').test(' /'))
    t.notOk(wcm('/', '/').test('/ '))
    t.notOk(wcm('/', '/').test(' / '))
    t.notOk(wcm('one/two', '/').test('one/*'))
    t.notOk(wcm('one/two', '/').test('one/**'))
    t.notOk(wcm('one/two/three', '/').test('one/*/three'))
    t.end()
  })

  t.end()
})

tap.test('?', (t) => {
  t.test('No separator given - matches 1 arbitrary char', (t) => {
    t.ok(wcm('?').test('o'))
    t.ok(wcm('?').test('/'))
    t.ok(wcm('on?').test('one'))
    t.ok(wcm('???').test('one'))
    t.ok(wcm('???').test('two'))
    t.ok(wcm('one?two').test('one/two'))
    t.notOk(wcm('?').test(''))
    t.notOk(wcm('?').test('on'))
    t.notOk(wcm('??e').test('on'))
    t.notOk(wcm('one?').test('one'))
    t.end()
  })

  t.test('Separator given - matches 1 non-separator char', (t) => {
    t.ok(wcm('?', '/').test('a'))
    t.ok(wcm('?', '/').test(' '))
    t.ok(wcm('??', '/').test('ab'))
    t.ok(wcm('??', '/').test(' b'))
    t.ok(wcm('???', '/').test('one'))
    t.ok(wcm('o?e', '/').test('one'))
    t.ok(wcm('?ne', '/').test('one'))
    t.ok(wcm('?ne', '/').test('ane'))
    t.ok(wcm('on?', '/').test('one'))
    t.ok(wcm('on?', '/').test('ont'))
    t.ok(wcm('o??', '/').test('one'))
    t.ok(wcm('o??', '/').test('ota'))
    t.ok(wcm('?n?', '/').test('one'))
    t.ok(wcm('one/t?o', '/').test('one/two'))
    t.ok(wcm('one/tw?', '/').test('one/two'))
    t.ok(wcm('o?e/tw?', '/').test('one/two'))
    t.notOk(wcm('?', '/').test(''))
    t.notOk(wcm('?', '/').test('/'))
    t.notOk(wcm('?', '/').test('/o'))
    t.notOk(wcm('?', '/').test('on'))
    t.notOk(wcm('?', '/').test('o/n'))
    t.notOk(wcm('??', '/').test(''))
    t.notOk(wcm('??', '/').test('/'))
    t.notOk(wcm('??', '/').test('//'))
    t.notOk(wcm('??', '/').test('o'))
    t.notOk(wcm('??', '/').test('on/e'))
    t.notOk(wcm('??', '/').test('one'))
    t.notOk(wcm('???', '/').test('on'))
    t.notOk(wcm('???', '/').test('/on'))
    t.notOk(wcm('???', '/').test('one/two'))
    t.notOk(wcm('???', '/').test('/'))
    t.notOk(wcm('???', '/').test('///'))
    t.notOk(wcm('o?e', '/').test('oe'))
    t.notOk(wcm('?ne', '/').test('ne'))
    t.notOk(wcm('on?', '/').test('on'))
    t.notOk(wcm('on?', '/').test('on/'))
    t.notOk(wcm('?one', '/').test('one'))
    t.notOk(wcm('?one', '/').test('/one'))
    t.notOk(wcm('o??', '/').test('o//'))
    t.notOk(wcm('o??', '/').test('o/e'))
    t.notOk(wcm('o??', '/').test('o'))
    t.notOk(wcm('o??', '/').test('on/e'))
    t.notOk(wcm('o???', '/').test('on/e'))
    t.notOk(wcm('one?two', '/').test('one/two'))
    t.notOk(wcm('one/t?o', '/').test('one/to'))
    t.notOk(wcm('one/tw?', '/').test('one/tw/'))
    t.notOk(wcm('o?e/tw?', '/').test('onetwo'))
    t.end()
  })

  t.end()
})

tap.test('*', (t) => {
  t.test('No separator given - matches 0 or more arbitrary chars', (t) => {
    t.ok(wcm('*').test(''))
    t.ok(wcm('*').test('/'))
    t.ok(wcm('*').test('one'))
    t.ok(wcm('one*').test('one'))
    t.ok(wcm('one*').test('one/two'))
    t.notOk(wcm('one*').test('on'))
    t.notOk(wcm('one*').test('ont'))
    t.notOk(wcm('one*').test('onte'))
    t.end()
  })

  t.test('Separator given - matches 0 or more non-separator chars', (t) => {
    t.ok(wcm('*', '/').test(''))
    t.ok(wcm('*', '/').test('one'))
    t.ok(wcm('*/*', '/').test('one/two'))
    t.ok(wcm('*/*', '/').test('one/'))
    t.ok(wcm('*/*', '/').test('one/ '))
    t.ok(wcm('*/*/*', '/').test('one/two/three'))
    t.ok(wcm('*/*/*', '/').test('//'))
    t.ok(wcm('one/*', '/').test('one/two'))
    t.ok(wcm('one/*', '/').test('one/*'))
    t.ok(wcm('one/*', '/').test('one/**'))
    t.ok(wcm('one/*', '/').test('one/***'))
    t.ok(wcm('one/*', '/').test('one/'))
    t.ok(wcm('one/*', '/').test('one/ '))
    t.ok(wcm('one/*/three', '/').test('one/two/three'))
    t.ok(wcm('one/*/three/', '/').test('one/two/three/'))
    t.ok(wcm('one/*/three/*', '/').test('one/two/three/'))
    t.ok(wcm('one/*/three/*', '/').test('one/two/three/four'))
    t.ok(wcm('one*', '/').test('one'))
    t.ok(wcm('*two', '/').test('two'))
    t.ok(wcm('one*', '/').test('onetwo'))
    t.ok(wcm('*two', '/').test('onetwo'))
    t.ok(wcm('one*three', '/').test('onetwothree'))
    t.ok(wcm('one*three', '/').test('onethree'))
    t.ok(wcm('one/*three', '/').test('one/twothree'))
    t.ok(wcm('one/two*', '/').test('one/twothree'))
    t.ok(wcm('*/', '/').test('/'))
    t.ok(wcm('*/one', '/').test('/one'))
    t.ok(wcm('*n*', '/').test('one'))
    t.ok(wcm('*n*', '/').test('oonee'))
    t.ok(wcm('*n*', '/').test('n'))
    t.ok(wcm('o*n*e', '/').test('one'))
    t.ok(wcm('o*n*e', '/').test('oone'))
    t.ok(wcm('o*n*e', '/').test('onne'))
    t.ok(wcm('o*n*e', '/').test('oonne'))
    t.ok(wcm('*ne/*o', '/').test('ne/o'))
    t.ok(wcm('*ne/*o', '/').test('one/o'))
    t.ok(wcm('*ne/*o', '/').test('ne/two'))
    t.ok(wcm('*ne/*o', '/').test('one/two'))
    t.ok(wcm('*/*o', '/').test('/o'))
    t.ok(wcm('*/*o', '/').test('/two'))
    t.ok(wcm('*/*o', '/').test('one/two'))
    t.notOk(wcm('*', '/').test('/'))
    t.notOk(wcm('*', '/').test('//'))
    t.notOk(wcm('*', '/').test('one/two'))
    t.notOk(wcm('*', '/').test('one/'))
    t.notOk(wcm('*', '/').test('/one'))
    t.notOk(wcm('one/*', '/').test(''))
    t.notOk(wcm('one/*', '/').test('/'))
    t.notOk(wcm('one/*', '/').test('//'))
    t.notOk(wcm('one/*', '/').test('one/two/three'))
    t.notOk(wcm('one/*', '/').test('one'))
    t.notOk(wcm('one/*', '/').test('/one'))
    t.notOk(wcm('one/*', '/').test('two/three'))
    t.notOk(wcm('*/one', '/').test(''))
    t.notOk(wcm('*/one', '/').test('/'))
    t.notOk(wcm('*/one', '/').test('//'))
    t.notOk(wcm('*/one', '/').test('one/two/three'))
    t.notOk(wcm('*/one', '/').test('one'))
    t.notOk(wcm('*/one', '/').test('one/'))
    t.notOk(wcm('*/one', '/').test('one/two'))
    t.notOk(wcm('*two', '/').test('one/two'))
    t.notOk(wcm('*n*', '/').test(''))
    t.notOk(wcm('*n*', '/').test('/'))
    t.notOk(wcm('*n*', '/').test('n/'))
    t.notOk(wcm('*n*', '/').test('one/'))
    t.notOk(wcm('*n*', '/').test('/n'))
    t.notOk(wcm('*n*', '/').test('/n/'))
    t.notOk(wcm('o*n*e', '/').test('/one'))
    t.notOk(wcm('o*n*e', '/').test('one/'))
    t.notOk(wcm('o*n*e', '/').test('o/ne'))
    t.notOk(wcm('o*n*e', '/').test('on/e'))
    t.notOk(wcm('o*n*e', '/').test('o/n/e'))
    t.notOk(wcm('o*n*e', '/').test(' one '))
    t.notOk(wcm('*ne/*o', '/').test('/ne/o'))
    t.notOk(wcm('*/*o', '/').test('//o'))
    t.notOk(wcm('*/*o', '/').test('/o/'))
    t.end()
  })

  t.end()
})

tap.test('**', (t) => {
  t.test('No separator given - acts as *', (t) => {
    t.ok(wcm('**').test(''))
    t.ok(wcm('**').test('/'))
    t.ok(wcm('**').test('one'))
    t.ok(wcm('one**').test('one'))
    t.ok(wcm('one**').test('one/two'))
    t.notOk(wcm('one**').test('on'))
    t.notOk(wcm('one**').test('ont'))
    t.notOk(wcm('one**').test('onte'))
    t.end()
  })

  t.test('Separator given - matches any number of segments', (t) => {
    t.ok(wcm('**', '/').test(''))
    t.ok(wcm('**', '/').test(' '))
    t.ok(wcm('**', '/').test(' /'))
    t.ok(wcm('**', '/').test('/'))
    t.ok(wcm('**', '/').test('///'))
    t.ok(wcm('**', '/').test('two'))
    t.ok(wcm('**', '/').test('two/three'))
    t.ok(wcm('**', '/').test('   /three'))
    t.ok(wcm('**', '/').test('   /three///'))
    t.ok(wcm('**', '/').test('/three'))
    t.ok(wcm('**', '/').test('//three'))
    t.ok(wcm('one/**', '/').test('one'))
    t.ok(wcm('one/**', '/').test('one/two'))
    t.ok(wcm('one/**', '/').test('one/two/three'))
    t.ok(wcm('one/**', '/').test('one/'))
    t.ok(wcm('one/**', '/').test('one/ / '))
    t.ok(wcm('one/**', '/').test('one/*/ **'))
    t.ok(wcm('one/**', '/').test('one/***'))
    t.ok(wcm('**/', '/').test('/one/'))
    t.ok(wcm('**/one', '/').test('/one'))
    t.ok(wcm('one/**/two', '/').test('one/two'))
    t.ok(wcm('one/**/three', '/').test('one/two/three'))
    t.ok(wcm('one/**/four', '/').test('one/two/three/four'))
    t.ok(wcm('o**', '/').test('o'))
    t.ok(wcm('o**', '/').test('one'))
    t.ok(wcm('o**', '/').test('onetwo'))
    t.ok(wcm('**e', '/').test('one'))
    t.ok(wcm('**e', '/').test('twoone'))
    t.notOk(wcm('one/**', '/').test(''))
    t.notOk(wcm('one/**', '/').test('/'))
    t.notOk(wcm('one/**', '/').test('//'))
    t.notOk(wcm('one/**', '/').test('two'))
    t.notOk(wcm('one/**', '/').test('/one'))
    t.notOk(wcm('**/one', '/').test(''))
    t.notOk(wcm('**/one', '/').test('/'))
    t.notOk(wcm('**/one', '/').test('//'))
    t.notOk(wcm('**/one', '/').test('two'))
    t.notOk(wcm('**/one', '/').test('one/'))
    t.notOk(wcm('**two', '/').test('one/two'))
    t.notOk(wcm('**two', '/').test('one/two'))
    t.notOk(wcm('**/', '/').test('/one'))
    t.notOk(wcm('**/', '/').test('/one/two'))
    t.notOk(wcm('o**', '/').test(''))
    t.notOk(wcm('o**', '/').test('two'))
    t.notOk(wcm('o**', '/').test('o/two'))
    t.notOk(wcm('o**', '/').test('o/two/three'))
    t.notOk(wcm('**e', '/').test(''))
    t.notOk(wcm('**e', '/').test('two'))
    t.notOk(wcm('**e', '/').test('two/one'))
    t.notOk(wcm('**e', '/').test('three/two/one'))
    t.end()
  })

  t.end()
})

tap.test('? and *', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('?*').test('o'))
    t.ok(wcm('?*').test('one'))
    t.ok(wcm('?*').test('one/two'))
    t.ok(wcm('?ne*').test('one/two'))
    t.notOk(wcm('?*').test(''))
    t.notOk(wcm('one?*').test('one'))
    t.notOk(wcm('?ne*').test('ne/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('?*', '/').test('one'))
    t.ok(wcm('?*/', '/').test('one/'))
    t.ok(wcm('?*/*', '/').test('one/'))
    t.ok(wcm('?*/*', '/').test('one/two'))
    t.ok(wcm('?*?', '/').test('oe'))
    t.ok(wcm('?*?', '/').test('one'))
    t.ok(wcm('?*?', '/').test('onnne'))
    t.ok(wcm('?*?/*', '/').test('one/'))
    t.ok(wcm('?*?/*', '/').test('one/two'))
    t.ok(wcm('?*?/*/*', '/').test('one/two/three'))
    t.ok(wcm('?*?/*/*', '/').test('one//'))
    t.notOk(wcm('?*', '/').test(''))
    t.notOk(wcm('?*', '/').test('/'))
    t.notOk(wcm('?*', '/').test('one/'))
    t.notOk(wcm('?*', '/').test('/one'))
    t.notOk(wcm('?*/*', '/').test('one'))
    t.notOk(wcm('?*/*', '/').test('one/two/'))
    t.notOk(wcm('?*/*', '/').test('one/two/three'))
    t.notOk(wcm('?*?', '/').test('o'))
    t.notOk(wcm('?*?', '/').test('/one'))
    t.notOk(wcm('?*?', '/').test('o/e'))
    t.notOk(wcm('?*?/*', '/').test(''))
    t.notOk(wcm('?*?/*', '/').test('one'))
    t.notOk(wcm('?*?/*', '/').test('one/two/three'))
    t.notOk(wcm('?*?/*/*', '/').test(''))
    t.notOk(wcm('?*?/*/*', '/').test('one'))
    t.notOk(wcm('?*?/*/*', '/').test('one/two'))
    t.notOk(wcm('?*?/*/*', '/').test('one/two/three/four'))
    t.notOk(wcm('?*?/*/*', '/').test('o/two/three'))
    t.end()
  })

  t.end()
})

tap.test('* and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('*/**').test('/'))
    t.ok(wcm('*/**').test('one/two'))
    t.ok(wcm('**/*').test('one/two'))
    t.ok(wcm('one**/*').test('one/two'))
    t.ok(wcm('one*/**').test('one/two'))
    t.ok(wcm('**one*/**').test('one/two'))
    t.notOk(wcm('**/*').test(''))
    t.notOk(wcm('**/*').test('one'))
    t.notOk(wcm('one**/*').test('one'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('*/**', '/').test(''))
    t.ok(wcm('*/**', '/').test(' '))
    t.ok(wcm('*/**', '/').test(' /'))
    t.ok(wcm('*/**', '/').test('/'))
    t.ok(wcm('*/**', '/').test('///'))
    t.ok(wcm('*/**', '/').test('two'))
    t.ok(wcm('*/**', '/').test('two/three'))
    t.ok(wcm('*/**', '/').test('   /three'))
    t.ok(wcm('*/**', '/').test('   /three///'))
    t.ok(wcm('*/**', '/').test('/three'))
    t.ok(wcm('*/**', '/').test('//three'))
    t.ok(wcm('**/*', '/').test('one'))
    t.ok(wcm('**/*', '/').test('one/two'))
    t.ok(wcm('**/*', '/').test('one/two/three'))
    t.ok(wcm('**/*', '/').test('one/*/three'))
    t.ok(wcm('**/*', '/').test('one/*/**'))
    t.ok(wcm('*/**/*', '/').test('one/two'))
    t.ok(wcm('*/**/*', '/').test('one/two/three'))
    t.ok(wcm('*/**/*', '/').test('one/two/three/four/five'))
    t.ok(wcm('*/**/*', '/').test('one/two/*/four/five'))
    t.ok(wcm('*/**/*', '/').test('one/two/*/four/**'))
    t.ok(wcm('*/**/*', '/').test('one/ /three'))
    t.ok(wcm('*/**/*/**', '/').test('one/two'))
    t.ok(wcm('*/**/*/**', '/').test('one/two/three'))
    t.ok(wcm('one/*/**', '/').test('one/two'))
    t.ok(wcm('one/*/**', '/').test('one/two/three'))
    t.ok(wcm('one/*/**', '/').test('one/two/three/four'))
    t.ok(wcm('one/*/**', '/').test('one/ / '))
    t.ok(wcm('one/*/**', '/').test('one/*/ **'))
    t.ok(wcm('one/*/**', '/').test('one/***'))
    t.ok(wcm('one/**/two/*', '/').test('one/two/three'))
    t.ok(wcm('one/**/two/*', '/').test('one/two/three'))
    t.ok(wcm('one/**/three/*', '/').test('one/two/three/four'))
    t.ok(wcm('*e/**e', '/').test('one/one'))
    t.ok(wcm('*e/**e', '/').test('e/e'))
    t.notOk(wcm('*/**/*', '/').test('one'))
    t.notOk(wcm('*/**/*/**', '/').test('one'))
    t.notOk(wcm('one/*/**', '/').test(''))
    t.notOk(wcm('one/*/**', '/').test('/'))
    t.notOk(wcm('one/*/**', '/').test('//'))
    t.notOk(wcm('one/*/**', '/').test('one'))
    t.notOk(wcm('*/**/one', '/').test(''))
    t.notOk(wcm('*/**/one', '/').test('/'))
    t.notOk(wcm('*/**/one', '/').test('//'))
    t.notOk(wcm('*/**/one', '/').test('one'))
    t.notOk(wcm('*/**/one', '/').test('one/two'))
    t.notOk(wcm('*/**/one', '/').test('two/one/two'))
    t.notOk(wcm('*e/**e', '/').test('one/two'))
    t.notOk(wcm('*e/**e', '/').test('two/e'))
    t.end()
  })

  t.end()
})

tap.test('? and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('?**').test('o'))
    t.ok(wcm('?**').test('one'))
    t.ok(wcm('?**').test('one/two'))
    t.ok(wcm('?ne**').test('one/two'))
    t.notOk(wcm('?**').test(''))
    t.notOk(wcm('one?**').test('one'))
    t.notOk(wcm('?ne**').test('ne/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('**/?', '/').test('o'))
    t.ok(wcm('**/?', '/').test('one/t'))
    t.ok(wcm('**/?', '/').test('one/two/three/f'))
    t.ok(wcm('???/**/???', '/').test('one/two'))
    t.ok(wcm('???/**/???', '/').test('one/three/two'))
    t.ok(wcm('???/**/???', '/').test('one//two'))
    t.notOk(wcm('**/?', '/').test(''))
    t.notOk(wcm('**/?', '/').test('one'))
    t.notOk(wcm('???/**/???', '/').test('one/two/three'))
    t.notOk(wcm('???/**/???', '/').test('one'))
    t.notOk(wcm('???/**/???', '/').test('onetwo'))
    t.end()
  })

  t.end()
})

tap.test('?, * and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('?*/**').test('one/two'))
    t.ok(wcm('?*/?**').test('one/two'))
    t.notOk(wcm('?*/**').test('one'))
    t.notOk(wcm('?*/**').test('/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('?*?/**', '/').test('oe'))
    t.ok(wcm('?*?/**', '/').test('one'))
    t.ok(wcm('?*?/**', '/').test('one/'))
    t.ok(wcm('?*?/**', '/').test('one/two'))
    t.ok(wcm('?*?/**', '/').test('one/two/three'))
    t.ok(wcm('?*?/**', '/').test('one/two/three/four'))
    t.ok(wcm('*/**/?*', '/').test('/o'))
    t.ok(wcm('*/**/?*', '/').test('/one'))
    t.ok(wcm('*/**/?*', '/').test('one/two'))
    t.ok(wcm('*/**/?*', '/').test('one/two/three'))
    t.ok(wcm('*/**/?*', '/').test('/two/three'))
    t.ok(wcm('*/**/?*', '/').test('one/two/three/four'))
    t.notOk(wcm('?*?/**', '/').test(''))
    t.notOk(wcm('?*?/**', '/').test('/'))
    t.notOk(wcm('?*?/**', '/').test('o'))
    t.notOk(wcm('?*?/**', '/').test('o/two'))
    t.notOk(wcm('*/**/?*', '/').test(''))
    t.notOk(wcm('*/**/?*', '/').test('o'))
    t.notOk(wcm('*/**/?*', '/').test('o/'))
    t.end()
  })

  t.end()
})

tap.test('Different separators are supported', (t) => {
  t.ok(wcm('', undefined).test(''))
  t.ok(wcm('one', undefined).test('one'))
  t.ok(wcm('o?e', undefined).test('one'))
  t.ok(wcm('', '.').test(''))
  t.ok(wcm('one', '.').test('one'))
  t.ok(wcm('o?e', '.').test('one'))
  t.ok(wcm('one.two', '.').test('one.two'))
  t.ok(wcm('one.*', '.').test('one.*'))
  t.ok(wcm('one.**.*\\?js', '.').test('one.two.three?js'))
  t.ok(wcm('one ** *\\?js', ' ').test('one two three?js'))
  t.notOk(wcm('one.two', '.').test('one/two'))
  t.notOk(wcm('one?two', '.').test('one.two'))
  t.notOk(wcm('one.*', '.').test('one/*'))
  t.notOk(wcm('one.**.*\\.js', '.').test('one.two.three.js'))
  t.end()
})

tap.test('RegExp characters are treated literally', (t) => {
  t.ok(wcm('[].').test('[].'))
  t.ok(wcm('one[].*+{}]  ][[..$', '/').test('one[].*+{}]  ][[..$'))
  t.notOk(wcm('[].').test('[]?'))
  t.notOk(wcm('one', '/').test('one[].*+{}]][[..$'))
  t.notOk(wcm('one[].*+{}]][[..$', '/').test('one'))
  t.notOk(wcm('[].*+{}]][[..$', '/').test('].*+{'))
  t.end()
})

tap.test('Escaped wildcards are treated literally', (t) => {
  t.test('No separator given', (t) => {
    t.ok(wcm('\\?').test('?'))
    t.ok(wcm('one/\\*\\*').test('one/**'))
    t.ok(wcm('on\\?.two\\*\\*').test('on?.two**'))
    t.notOk(wcm('\\?').test('a'))
    t.notOk(wcm('one/\\*\\*').test('one/two'))
    t.notOk(wcm('on\\?.two\\*\\*').test('one.two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(wcm('\\?', '/').test('?'))
    t.ok(wcm('\\*', '/').test('*'))
    t.ok(wcm('\\*\\*', '/').test('**'))
    t.ok(wcm('\\?\\*', '/').test('?*'))
    t.ok(wcm('\\?\\*\\*', '/').test('?**'))
    t.ok(wcm('one\\?', '/').test('one?'))
    t.ok(wcm('one\\*', '/').test('one*'))
    t.ok(wcm('one\\*\\*', '/').test('one**'))
    t.ok(wcm('one/\\*\\*', '/').test('one/**'))
    t.notOk(wcm('\\?', '/').test('!'))
    t.notOk(wcm('\\*', '/').test('!'))
    t.notOk(wcm('\\*', '/').test('!!'))
    t.notOk(wcm('\\*\\*', '/').test('!!'))
    t.notOk(wcm('\\*\\*', '/').test('one/two'))
    t.notOk(wcm('\\?\\*', '/').test('one'))
    t.notOk(wcm('\\?\\*\\*', '/').test('one'))
    t.notOk(wcm('one\\?', '/').test('one!'))
    t.notOk(wcm('one\\*', '/').test('one!'))
    t.notOk(wcm('one\\*\\*', '/').test('one!!'))
    t.notOk(wcm('one/\\*\\*', '/').test('one/!!'))
    t.end()
  })
  t.end()
})
